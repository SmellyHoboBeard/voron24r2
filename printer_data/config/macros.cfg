#####################################################################
#   Macros
#####################################################################
[gcode_macro PARK]
gcode:
    G0 X345 Y345

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    STATUS_HOMING
    G28
    status_leveling
    QUAD_GANTRY_LEVEL
    STATUS_HOMING
    G28
    PARK
    status_ready
    RESTORE_GCODE_STATE NAME=STATE_G32
   
# [gcode_macro PRINT_START]
# #   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
# gcode:
#     G32                            ; home all axes
#     STATUS_MESHING
#     BED_MESH_CALIBRATE ADAPTIVE=1
#     G90                            ; absolute positioning
#     G1 Z20 F3000                   ; move nozzle away from bed
#     status_printing

[gcode_macro LOAD_FILAMENT]
gcode:
    M83                            ; set extruder to relative
    G1 E75 F300                    ; load
    G1 E15 F150                    ; prime nozzle with filament
    M82                            ; set extruder to absolute
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
    M83                            ; set extruder to relative
    G1 E10 F300                    ; extrude a little to soften tip
    G1 E-75 F1800                  ; retract some, but not too much or it will jam
    M82                    

[gcode_macro PRINT_START]
description: "Simplified Print Start for Voron 2.4"
gcode:
    {% set BED_TEMP = params.BED|int %}
    {% set EXTRUDER_TEMP = params.EXTRUDER|int %}
    {% set XMIN = params.XMIN|float %}
    {% set YMIN = params.YMIN|float %}
    
    # Extend idle timeout during prep
    SET_IDLE_TIMEOUT TIMEOUT=3600

    STATUS_HEATING
    M117 Preheating Bed to {BED_TEMP}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}

    STATUS_HOMING
    M117 Homing All Axes
    G28

    M117 Quad Gantry Leveling
    QUAD_GANTRY_LEVEL

    # Warm hotend just enough for nozzle clean
    STATUS_HEATING
    M117 Heating Hotend to 150 for Clean
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM=150

    M117 Cleaning Nozzle
    CLEAN_NOZZLE

    STATUS_HOMING
    M117 Re-Homing Z
    G28 Z

    STATUS_MESHING
    M117 Bed Mesh Calibration
    BED_MESH_CALIBRATE ADAPTIVE=1

    # Final preheat for actual print
    PARK
    STATUS_HEATING
    M117 Final Preheat to {BED_TEMP} / {EXTRUDER_TEMP}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP}

    M117 Purging Line
    G92 E0.0
    G1 Z0.8 F6000
    G1 X{XMIN - 10} Y{YMIN} F6000.0
    G1 X{XMIN - 10} Y{YMIN + 30} E30 F360.0
    G92 E0.0
    G1 X{XMIN - 30} Y{YMIN + 15} E30 F360.0
    G92 E0.0
    G1 X{XMIN - 10} Y{YMIN} E30 F360.0
    G92 E0.0
    G1 E-0.5 F2100
    G1 X{XMIN - 10} Y{YMIN - 10} F6000.0
    G92 E0.0

    STATUS_PRINTING
    M117 Loading Skew Profile & Starting Print
    SKEW_PROFILE LOAD=CaliFlower

    # Restore idle timeout
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}

    M117 Printing...
    
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    SET_SKEW CLEAR=1
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    CLEAN_NOZZLE
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS

    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G91                  ; Relative positioning
    G1 Z25               ; Raise Z more
    G90                  ; Absolute positioning
    # PARK
    status_part_ready
    M107                                     ; turn off fan
    M141 S35
    
    BED_MESH_CLEAR

    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0

#################################################
# !!! UPDATE WITH YOUR PRINTER INFO !!! #########
############### Config options ##################

[gcode_macro _BEDFANVARS]
variable_threshold: 100     # If bed temp target is above this threshold, fans tun on slow, until target reached, then turn on fast.
variable_slowthreshold: 50  # AKInferno Added: if the bed temp target is above this threshold, fans turn on and stay slow.
variable_fast: 1.0      # Current of fast Fan speed
variable_slow: 0.3      # Current of slow Fan speed (while bed is heating / for targets below top threshold / fan speed during cooldown 
variable_offthreshold: 55   # AKInferno Added: run fan after bed is turned off, until the bed temp falls below this temp.
gcode:

########## Aliases #########

[gcode_macro BEDFANSSLOW]
gcode:
    # Vars
    {% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}
    SET_FAN_SPEED FAN=BedFans SPEED={SLOW}


[gcode_macro BEDFANSFAST]
gcode:
    # Vars
    {% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}
    SET_FAN_SPEED FAN=BedFans SPEED={FAST}


[gcode_macro BEDFANSOFF]
gcode:
    SET_FAN_SPEED FAN=BedFans SPEED=0


############ Command overrides ############

# Override, set fan speeds to low and start monitoring loop.
[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
    # Parameters
    {% set HEATER = params.HEATER|default("None") %}
    {% set TARGET = params.TARGET|default(0)|int %}
    # Vars
    {% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
    {% set SLOWTHRESHOLD = printer["gcode_macro _BEDFANVARS"].slowthreshold|int %}
    
    {% if HEATER|lower == "extruder" %}
        M104 S{TARGET}
    {% elif HEATER|lower == "heater_bed" %}
        M99140 S{TARGET}
    {% else %}
        {action_respond_info("Heater %s not supported" % HEATER)}
    {% endif %}

    # Set fans to low if heater_bed temp is requested above threshold temp, and kick off monitoring loop.
    {% if HEATER|lower == "heater_bed" %}
        {% if TARGET >= THRESHOLD %}
            BEDFANSSLOW
            UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1
        {% elif TARGET >= SLOWTHRESHOLD %}  # added this to Ellis' original config to turn fans on low, but not start the monitoring loop for targets in PLA/PETG range. 
            BEDFANSSLOW
        {% else %}
            TURN_OFF_HEATERS
        {% endif %}
    {% endif %}
    
# Override M190 (Wait for Bed Temperature)
# As a bonus, use TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M190]
rename_existing: M99190
gcode:
    # Parameters
    {% set S = params.S|int %}
    # Vars
    {% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
    
    {% if S >= THRESHOLD %}
        BEDFANSSLOW                                                             # >= Threshold temp: Low speed fans while heating 
    {% else %}
        TURN_OFF_HEATERS                                                        # < Threshold temp: Turn bed fans off
    {% endif %}                                        

    M140 {% for p in params
      %}{'%s%s' % (p, params[p])}{%
      endfor %}                                                                 # Set bed temp
      
    {% if S != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}  # Wait for bed temp within 5 degrees
    {% endif %}

    # Post-heating fan speeds
    {% if S >= THRESHOLD %}                                 
        BEDFANSFAST                                                             # >= Threshold temp: Higher speed fans after heating finished
    {% endif %}
    
# Replace M140 (Set Bed Temperature) to just be an alias of SET_HEATER_TEMPERATURE (which has associated bed fan logic if enabled)
[gcode_macro M140]
rename_existing: M99140
gcode:
    # Parameters
    {% set S = params.S|float %}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}
    
# Replace TURN_OFF_HEATERS
[gcode_macro TURN_OFF_HEATERS]
rename_existing: _TURN_OFF_HEATERS
gcode:
    _TURN_OFF_HEATERS                                           # Turn off heaters
    {% if printer.heater_bed.temperature|int >= printer["gcode_macro _BEDFANVARS"].offthreshold %}      # If bed temp is above Off Theshold, start timer for bedfan for 5min and shutdown heaters
        UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=300 
    {% endif %}

################ Monitoring loop #####################

# Turns bed fans to "fast" speed once target bed temp is reached.
[delayed_gcode bedfanloop]
gcode:
    # Vars
    {% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
    {% set COOLDOWN = printer["gcode_macro _BEDFANVARS"].offthreshold %}
    
    {% if printer.heater_bed.target >= THRESHOLD %}                             # Continue only if target temp greater than threshold.
        {% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}
            BEDFANSFAST                                     # If within 1 degree of target temp: Higher speed fans
        {% else %}
            UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5                       # If temp not reached yet: loop again
        {% endif %}
    {% elif printer.heater_bed.target == 0 %}                               # If TARGET is 0 (So fans turned off)
        {% if printer.heater_bed.temperature|int >= COOLDOWN %}                         # AND if Bed temperature is above Off Threshold
            BEDFANSSLOW                                             # Set to slow fanspeed
            UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=300                             # start timer to check again in 5 min
        {% else %}
            BEDFANSOFF                  # TARGET is 0 and bed temp is < Off Threshold turn Filter off and don't restart timer
        {% endif %}
    {% endif %}


# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

#####################################################################
#   Nozzle Clean and Purge Bucket
#####################################################################    
[gcode_macro CLEAN_NOZZLE]
variable_start_x: 263
variable_start_y: 348
variable_start_z: 2.2
variable_wipe_dist: 10
variable_wipe_qty: 10
variable_wipe_spd: 300
variable_raise_distance: 10

gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
    {% endif %}
 
    G90 ; absolute positioning
    ## Move nozzle to start position
    G1 X{start_x} Y{start_y} F6000
    G1 Z{start_z} F1500

    ## Wipe nozzle
    {% for wipes in range(1, (wipe_qty + 1)) %}
    G1 X{start_x + wipe_dist} F{wipe_spd * 60}
    G1 X{start_x} F{wipe_spd * 60}
    {% endfor %}

    ## Raise nozzle
    G1 Z{raise_distance}


[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    # SDCARD_RESET_FILE
    STATUS_OFF
    PRINT_END
    BASE_CANCEL_PRINT


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        # SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}


[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

[gcode_macro OFF]
gcode:
    M84                                  ; turn steppers off
    TURN_OFF_HEATERS                     ; turn bed / hotend off
    M107                                 ; turn print cooling fan off
    #SET_FAN_SPEED FAN=Exhaust SPEED=0   ; turn exhaust fan off
    # SET_FAN_SPEED FAN=BedFans SPEED=0   ; bed fan off
    STATUS_OFF
    #SET_PIN PIN=caselight VALUE=0       ; turn case light off

[gcode_macro LINE_PURGE]
description: A purge macro that adapts to be near your actual printed objects

variable_adaptive_enable: True      # Change to False if you'd like the purge to be in the same spot every print
variable_z_height: 0.4              # Height above the bed to purge
variable_purge_amount: 20           # Amount of filament in millimeters to purge
variable_line_length: 70            # Overall desired length of purge line in millimeters, around 1/5th of X axis length is a good starting value
variable_flow_rate: 12              # Desired flow rate in mm3/s (Around 12 for standard flow hotends, around 24 for high flow hotends)
variable_x_default: 15             # Default X location to purge. If adaptive_enable is True, this is overwritten
variable_y_default: 15            # Default Y location to purge. If adaptive_enable is True, this is overwritten
variable_distance_to_object_y: 15   # Y distance in millimeters away from the print area for purging. Must be less than or equal to y_default if adaptive_enable is False

### This section is for those who are using Moonraker's Update Manager for KAMP, or want a more verbose macro. ###

variable_display_parameters: True   # Display macro paramters in the console, useful for debugging the SETUP_LINE_PURGE call, or more verbosity.

gcode:

    {% if display_parameters == True %}
      { action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }
      { action_respond_info("z_height        : %f" % (z_height))  }
      { action_respond_info("purge_amount    : %f" % (purge_amount))  }
      { action_respond_info("line_length     : %f" % (line_length))  }
      { action_respond_info("flow_rate       : %f" % (flow_rate))  }
      { action_respond_info("x_default       : %f" % (x_default))  }
      { action_respond_info("y_default       : %f" % (y_default))  }
      { action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }
    {% endif %}

    {% if adaptive_enable == True %}
        {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
        {% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}
        {% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}
        {% set x_origin = ([x_origin, 0] | max) %}
        {% set y_origin = ([y_origin, 0] | max) %}
    {% else %}
        {% set x_origin = x_default | float %}
        {% set y_origin = y_default | float %}
    {% endif %}
    {% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}
    {% set cross_section = nozzle_dia * z_height | float %}
    {% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}
    {% set travel_speed = 3500 | float %}

    G92 E0                                                                              # Reset extruder
    G0 F{travel_speed}                                                                  # Set travel speed
    G90                                                                                 # Absolute positioning
    G0 X{x_origin} Y{y_origin - distance_to_object_y}                                   # Move to purge position
    G0 Z{z_height}                                                                      # Move to purge Z height
    M83                                                                                 # Relative extrusion mode
    G1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}                    # Purge line
    G1 E-.5 F2100                                                                       # Retract
    G92 E0                                                                              # Reset extruder distance
    M82                                                                                 # Absolute extrusion mode
    G0 Z{z_height * 2} F{travel_speed}                                                  # Z hop

[gcode_macro SETUP_LINE_PURGE]
gcode:
    SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}
    SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}
    SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}
    SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}
    SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}
    SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}
    SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}
    SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}
    SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}

[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh -c $0"
timeout: 90.0
verbose: True